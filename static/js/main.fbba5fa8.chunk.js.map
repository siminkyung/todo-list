{"version":3,"sources":["components/PageTemplate/PageTemplate.js","components/TodoInput/TodoInput.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["cx","classNames","bind","styles","PageTemplate","_ref","children","react_default","a","createElement","className","TodoInput","value","onChange","onInsert","onKeyPress","e","key","onClick","TodoItem","nextProps","nextState","this","props","done","_this$props","onToggle","onRemove","type","checked","readOnly","stopPropagation","Component","TodoList","todos","todoList","map","todo","components_TodoItem_TodoItem","id","text","Fragment","initialTodos","Array","fill","foo","index","concat","App","state","input","handleRemove","_this","findIndex","setState","Object","toConsumableArray","slice","length","handleToggle","console","log","toggled","objectSpread","getId","handleInsert","_this$state","alert","newTodo","handleChange","target","_this$state2","components_PageTemplate_PageTemplate","components_TodoInput_TodoInput","components_TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbba5fa8.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './PageTemplate.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst PageTemplate = ({children}) => { //stateless 컴포넌트. state값이 없이 오직 값을 return하기 위해서만 사용하고, props만 받음\r\n                                      //render함수도 없고 라이프사이클도 없음\r\n    return (\r\n        <div className={cx('page-template')}>\r\n            <h1>일정 관리</h1>\r\n            <div className={cx('content')}>\r\n               {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageTemplate;","import React from 'react';\r\nimport styles from './TodoInput.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\n/*\r\n  value : input값\r\n  onChange : input 변경 이벤트\r\n  onInsert : 추가 버튼 클릭 이벤트\r\n*/\r\n\r\nconst TodoInput = ({value, onChange, onInsert}) => {\r\n    const handleKeyPress = (e) =>{\r\n        if(e.key === \"Enter\"){\r\n            onInsert();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={cx('todo-input')}>\r\n            <input onChange={onChange} value={value} onKeyPress={handleKeyPress} />\r\n            <div className={cx('add-button')} onClick={onInsert}>추가</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoInput;","import React, { Component } from 'react';\r\nimport styles from './TodoInput.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass TodoItem extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.done !== nextProps.done;\r\n    }\r\n\r\n    render() {\r\n        const {done, children, onToggle, onRemove} = this.props;\r\n\r\n        return (\r\n            <div className={cx('todo-item')} onClick={onToggle}>\r\n               <input className={cx('tick')} type=\"checkbox\" checked={done} readOnly/>\r\n               <div className={cx('text', {done})}>{children}</div>\r\n               <div className={cx('delete')} onClick={(e) => {onRemove(); e.stopPropagation();}}>[지우기]</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from '../TodoItem';\r\n\r\nclass TodoList extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n    render() {\r\n        const {todos, onToggle, onRemove} = this.props;\r\n        const todoList = \r\n              todos.map(todo => <TodoItem done={todo.done} key={todo.id}\r\n                                          onToggle={()=>onToggle(todo.id)}\r\n                                          onRemove={()=>onRemove(todo.id)}>{todo.text}</TodoItem>);\r\n        \r\n        return (\r\n            <>\r\n            {todoList}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\nimport PageTemplate from './components/PageTemplate';\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\n\nconst initialTodos = new Array(500).fill(0).map(\n  (foo, index) => ({id: index, text:`일정 ${index}`, done : false})\n);\n\nclass App extends Component {\n  state = {\n    input : '', //input 값\n\n    //일정 데이터 초기값\n    todos :initialTodos\n  }\n\n  handleRemove = (id) =>{\n    const {todos} = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n\n    this.setState({\n      todos : [\n        ...todos.slice(0, index),\n        ...todos.slice(index+1, todos.length)\n      ]\n    })\n  }\n\n  handleToggle = (id) =>{\n    console.log(id);\n    const {todos} = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n\n    const toggled = {\n      ...todos[index],\n      done : !todos[index].done\n    }\n\n    this.setState({\n      todos : [\n        ...todos.slice(0,index),\n        toggled,\n        ...todos.slice(index+1,todos.length)\n      ]\n    })\n\n    console.log(this.state.todos);\n  }\n\n\n  //일정 데이터 안에 들어가는 id값\n  id = 1;\n  getId = () => {\n    return ++this.id;\n  }\n\n  handleInsert = () => {\n    const {todos, input} = this.state;\n\n    if(input === '') {alert('내용을 입력해주세요.'); return false;}\n\n\n    const newTodo = {\n      id : this.getId(),\n      text : input,\n      done : false\n    }\n\n    this.setState({\n      input : '', //input 초기화\n      todos : [...todos, newTodo]\n    })\n  }\n\n  handleChange = (e) => {\n    const {value} = e.target;\n    this.setState({\n      input : value\n    })\n  }\n\n  render() {\n    const {input,todos} = this.state;\n    const {handleChange, handleInsert, handleToggle, handleRemove} = this;\n\n    return (\n      <PageTemplate>\n        <TodoInput onChange={handleChange} onInsert={handleInsert} value={input}/>\n        <TodoList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\n      </PageTemplate>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister(); //service worker? 네트웍이 느리거나 오프라인인 상태에서도 온라인 인것 처럼 리소스들을 캐싱해서 보여주는 모듈\n"],"sourceRoot":""}